# Copied from https://github.com/hrvey/combine-prs-workflow/tree/e6889db6de7e161daaa13f1046d5f6201525664f
name: 'Combine PRs'

on:
  workflow_dispatch:
    inputs:
      branchPrefix:
        description: 'Branch prefix to find combinable PRs based on'
        required: true
        default: 'dependabot'
      mustBeGreen:
        description: 'Only combine PRs that are green (status is success)'
        required: true
        default: true
      combineBranchName:
        description: 'Name of the branch to combine PRs into'
        required: true
        default: 'combine-prs-branch'
      ignoreLabel:
        description: 'Exclude PRs with this label'
        required: true
        default: 'nocombine'

jobs:
  combine-prs:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/github-script@v3
        id: fetch-branch-names
        name: Fetch branch names
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { owner, repo } = context.repo;
            const pulls = await github.paginate('GET /repos/:owner/:repo/pulls', { owner, repo });

            const branches = [];
            const prs = [];
            var base_branch = null;

            const ignoreLabel = '${{ github.event.inputs.ignoreLabel }}';
            const branchPrefix = '${{ github.event.inputs.branchPrefix }}';
            const mustBeGreen = ${{ github.event.inputs.mustBeGreen }};

            for (const pull of pulls) {
              const branch = pull['head']['ref'];
              console.info(`Pull for branch: ${branch}`);
              if (branch.startsWith(branchPrefix)) {
                console.info(`Branch matched: ${branch}`);
                if(mustBeGreen) {
                  console.info(`Checking green status: ${branch}`);
                  const statuses = await github.paginate('GET /repos/{owner}/{repo}/commits/{ref}/status', {
                    owner,
                    repo,
                    ref: branch,
                  });
                  if(statuses.length > 0) {
                    const {state} = statuses[0];
                    console.info(`Validating status: ${state}`);
                    if(state != 'success') {
                      console.info(`Discarding ${branch} with status ${state}`);
                      continue;
                    }
                  }
                }
                console.info(`Checking labels: ${branch}`);
                const labels = pull['labels'].map(({name}) => name);
                if(labels.includes(ignoreLabel)) {
                  console.info(`Discarding ${branch} with label ${ignoreLabel}`);
                  continue;
                }

                console.info(`Adding branch to array: ${branch}`);
                branches.push(branch);
                prs.push(`# ${pull['number']} ${pull['title']}`);
                base_branch = pull['base']['ref'];
              }
            }
            
            if (branches.length == 0) {
              core.setFailed('No PRs/branches matched criteria');
              return;
            }
            core.setOutput('base-branch', base_branch);
            core.setOutput('prs-string', prs.join('\n'));
            
            let combined = branches.join(' ')
            console.info(`Combined: ${combined}`);
            return combined

      - uses: actions/checkout@v2.3.3
        with:
          fetch-depth: 0

      - name: Created combined branch
        env:
          BASE_BRANCH: ${{ steps.fetch-branch-names.outputs.base-branch }}
          BRANCHES_TO_COMBINE: ${{ steps.fetch-branch-names.outputs.result }}
          COMBINE_BRANCH_NAME: ${{ github.event.inputs.combineBranchName }}
        run: |
          echo "$BRANCHES_TO_COMBINE"
          sourcebranches="${BRANCHES_TO_COMBINE%\"}"
          sourcebranches="${sourcebranches#\"}"
          
          basebranch="${BASE_BRANCH%\"}"
          basebranch="${basebranch#\"}"
          
          git config pull.rebase false
          git config user.name github-actions
          git config user.email github-actions@github.com
          
          git branch $COMBINE_BRANCH_NAME $basebranch
          git checkout $COMBINE_BRANCH_NAME
          git pull origin $sourcebranches --no-edit
          git push origin $COMBINE_BRANCH_NAME

      - uses: actions/github-script@v3
        name: Create Combined Pull Request
        env:
          PRS_STRING: ${{ steps.fetch-branch-names.outputs.prs-string }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const prString = process.env.PRS_STRING;
            const body = `This PR was created by the Combine PRs action by combining the following PRs:\n${prString}`;
            await github.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Combined PR',
              head: '${{ github.event.inputs.combineBranchName }}',
              base: '${{ steps.fetch-branch-names.outputs.base-branch }}',
              body: body
            });
